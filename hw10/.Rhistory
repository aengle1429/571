}
library(nlme)
library(lme4)
for(k in 1:repSize)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < -1)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
#model3 = geem(Y~t+X,id=id,data=missing,corstr="exchangeable")
model3 = geem(Y~t+X,id=id,data=missing[complete.cases(missing),],corstr="exchangeable")
#model2 = gee(Y~t+X, id=id, data=missing, na.action=na.omit, corstr="exchangeable")
#model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
modelLMM <- lmer(Y~t+X+(1|id), data=missing)
betas[k,] = model3$beta
betasLMM[k,] = fixef(modelLMM)
len = 1.96*summary(model3)$se.robust
lenLMM = 1.96*summary(modelLMM)$coefficients[,2]
if(
findInterval(beta0,model3$beta[1] + c(-1,1)*len[1]) == 1
)
{
count0 = count0 + 1
}
if(
findInterval(beta1,model3$beta[2] + c(-1,1)*len[2]) == 1
)
{
count1 = count1 + 1
}
if(
findInterval(beta2,model3$beta[3] + c(-1,1)*len[3]) == 1
)
{
count2 = count2 + 1
}
#####coverage intervals for LMM
if(
findInterval(beta0,fixef(modelLMM)[1] + c(-1,1)*lenLMM[1]) == 1
)
{
count0LMM = count0LMM + 1
}
if(
findInterval(beta1,fixef(modelLMM)[2] + c(-1,1)*lenLMM[2]) == 1
)
{
count1LMM = count1LMM + 1
}
if(
findInterval(beta2,fixef(modelLMM)[3] + c(-1,1)*lenLMM[3]) == 1
)
{
count2LMM = count2LMM + 1
}
}
count0
count1
count2
betas
hist(betas[,1],main=expression(paste("Histogram of ", hat(beta)[0], " (GEE)")),xlab=expression(hat(beta)[0]))
library(nnet)
?nnet
ac.ts <-scan("http://faculty.washington.edu/dbp/s519/Data/clock.txt")
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
iris
?iris
iris3
?iris3
ir <- rbind(iris3[,,1],iris3[,,2],iris3[,,3])
targets <- class.ind( c(rep("s", 50), rep("c", 50), rep("v", 50)) )
samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
?nnet
ir1 <- nnet(ir[samp,], targets[samp,], size = 2, rang = 0.1,
decay = 5e-4, maxit = 200)
head(ir[samp,])
head(targets[samp,])
?max.col
predict(ir1, ir[-samp,])
test.cl <- function(true, pred) {
true <- max.col(true)
cres <- max.col(pred)
table(true, cres)
}
test.cl(targets[-samp,], predict(ir1, ir[-samp,]))
max.col(predict(ir1, ir[-samp,]))
targets[-samp,]
?nn
?nnet
ac.ts <-scan("http://faculty.washington.edu/dbp/s519/Data/clock.txt")
ac.ts
plot(ac.ts,typ="l",xlab="t",ylab=expression(x[t]),col="blue",main="Atomic Clock Time Series")
### define function for plotting sample ACF with WN and MA(1) CIs
plot.ACFestMA <- function(ts, y.lims=c(-1,1), xlab.ts="h  (lag)", ylab.ts="ACF", n.lags=40, lag.0=FALSE, q=0, main=NULL)
{
ts.acf <- acf(ts, lag.max=n.lags, plot=FALSE)
n.ts <- length(ts)
CI.hw <- 1.96/sqrt(n.ts)
k <- if(lag.0) 0 else 1
xs <- k:n.lags
ys <- ts.acf$acf[(k+1):(n.lags+1)]
plot(xs,ys,typ="h",xlab=xlab.ts,ylab=ylab.ts,ylim=y.lims,col="blue",main=main)
points(xs,ys,col="red",cex=0.5)
xs <- 1:(n.lags+10)
abline(h=0,lty="dashed")
lines(c(0.5,n.lags+0.5),rep(CI.hw,2),col="blue",lty="dashed")
lines(c(0.5,n.lags+0.5),rep(-CI.hw,2),col="blue",lty="dashed")
if(q > 0)
{
for(j in 0:(q-1))
{
CI.hw <- 1.96*(1+2*sum((ts.acf$acf[2:(2+j)])^2))/sqrt(n.ts)
lines(c(j+1.5,n.lags+0.5),rep(CI.hw,2),col="blue",lty="dashed")
lines(c(j+1.5,n.lags+0.5),rep(-CI.hw,2),col="blue",lty="dashed")
}
}
}
plot.ACFestMA(ac.ts,q=1,y.lims=c(-0.5,0.5),main="Sample ACF for Atomic Clock Series")
### overhead XIII-69
ac.pacf <- acf(ac.ts, lag.max=40, type="partial", plot=FALSE)
ac.pacf <- acf(ac.ts, lag.max=40, type="partial", plot=FALSE)
xs <- 1:40
ys <- ac.pacf$acf[1:40]
plot(xs,ys,typ="h",xlab="h  (lag)",ylab="PACF",ylim=c(-1,1),col="blue",main="Sample PACF for Atomic Clock Series")
points(xs,ys,col="red",cex=0.5)
n.ac <- length(ac.ts)
CI.hw <- 1.96/sqrt(n.ac)
abline(h=0,lty="dashed")
abline(h=c(-CI.hw,CI.hw),col="blue",lty="dashed")
ar.yw(ac.ts)
install.packages("neuralnet")
library(geeM)
library(R2WinBUGS)
library(lme4)
library(nlme)
library(mcmc)
library(rjags)
library("INLA")
library("sandwich")
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw10")
set.seed(572)
sb = 1
sy = 0.5
beta0 = 1
beta1 = -1
beta2 = 0.5
n = 10^3
repSize = 10^0
n = 10^4
repSize = 10^0
betas = matrix(0,nrow=repSize,ncol=3)
betasLMM = matrix(0,nrow=repSize, ncol=3)
count0 = 0
count1 = 0
count2 = 0
count0LMM = 0
count1LMM = 0
count2LMM = 0
for(k in 1:repSize)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < -1)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
#model3 = geem(Y~t+X,id=id,data=missing,corstr="exchangeable")
model3 = geem(Y~t+X,id=id,data=missing[complete.cases(missing),],corstr="exchangeable")
#model2 = gee(Y~t+X, id=id, data=missing, na.action=na.omit, corstr="exchangeable")
#model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
modelLMM <- lmer(Y~t+X+(1|id), data=missing)
betas[k,] = model3$beta
betasLMM[k,] = fixef(modelLMM)
len = 1.96*summary(model3)$se.robust
lenLMM = 1.96*summary(modelLMM)$coefficients[,2]
if(
findInterval(beta0,model3$beta[1] + c(-1,1)*len[1]) == 1
)
{
count0 = count0 + 1
}
if(
findInterval(beta1,model3$beta[2] + c(-1,1)*len[2]) == 1
)
{
count1 = count1 + 1
}
if(
findInterval(beta2,model3$beta[3] + c(-1,1)*len[3]) == 1
)
{
count2 = count2 + 1
}
#####coverage intervals for LMM
if(
findInterval(beta0,fixef(modelLMM)[1] + c(-1,1)*lenLMM[1]) == 1
)
{
count0LMM = count0LMM + 1
}
if(
findInterval(beta1,fixef(modelLMM)[2] + c(-1,1)*lenLMM[2]) == 1
)
{
count1LMM = count1LMM + 1
}
if(
findInterval(beta2,fixef(modelLMM)[3] + c(-1,1)*lenLMM[3]) == 1
)
{
count2LMM = count2LMM + 1
}
}
model3
summary(model3)
set.seed(572)
sb = 1
sy = 0.5
beta0 = 1
beta1 = -1
beta2 = 0.5
n = 10^4
repSize = 10^0
betas = matrix(0,nrow=repSize,ncol=3)
betasLMM = matrix(0,nrow=repSize, ncol=3)
count0 = 0
count1 = 0
count2 = 0
count0LMM = 0
count1LMM = 0
count2LMM = 0
for(k in 1:repSize)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < -1)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
model3 = geem(Y~t+X,id=id,data=missing,corstr="exchangeable")
#model2 = gee(Y~t+X, id=id, data=missing, na.action=na.omit, corstr="exchangeable")
#model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
modelLMM <- lmer(Y~t+X+(1|id), data=missing)
betas[k,] = model3$beta
betasLMM[k,] = fixef(modelLMM)
len = 1.96*summary(model3)$se.robust
lenLMM = 1.96*summary(modelLMM)$coefficients[,2]
if(
findInterval(beta0,model3$beta[1] + c(-1,1)*len[1]) == 1
)
{
count0 = count0 + 1
}
if(
findInterval(beta1,model3$beta[2] + c(-1,1)*len[2]) == 1
)
{
count1 = count1 + 1
}
if(
findInterval(beta2,model3$beta[3] + c(-1,1)*len[3]) == 1
)
{
count2 = count2 + 1
}
#####coverage intervals for LMM
if(
findInterval(beta0,fixef(modelLMM)[1] + c(-1,1)*lenLMM[1]) == 1
)
{
count0LMM = count0LMM + 1
}
if(
findInterval(beta1,fixef(modelLMM)[2] + c(-1,1)*lenLMM[2]) == 1
)
{
count1LMM = count1LMM + 1
}
if(
findInterval(beta2,fixef(modelLMM)[3] + c(-1,1)*lenLMM[3]) == 1
)
{
count2LMM = count2LMM + 1
}
}
model3
summary(model3)
beta2 = 0.5
n = 10^4
repSize = 10^0
betas = matrix(0,nrow=repSize,ncol=3)
betasLMM = matrix(0,nrow=repSize, ncol=3)
count0 = 0
count1 = 0
count2 = 0
count0LMM = 0
count1LMM = 0
count2LMM = 0
for(k in 1:repSize)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < 0)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
#model2 = gee(Y~t+X, id=id, data=missing, na.action=na.omit, corstr="exchangeable")
#model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
modelLMM <- lmer(Y~t+X+(1|id), data=missing)
betas[k,] = model3$beta
betasLMM[k,] = fixef(modelLMM)
len = 1.96*summary(model3)$se.robust
lenLMM = 1.96*summary(modelLMM)$coefficients[,2]
if(
findInterval(beta0,model3$beta[1] + c(-1,1)*len[1]) == 1
)
{
count0 = count0 + 1
}
if(
findInterval(beta1,model3$beta[2] + c(-1,1)*len[2]) == 1
)
{
count1 = count1 + 1
}
if(
findInterval(beta2,model3$beta[3] + c(-1,1)*len[3]) == 1
)
{
count2 = count2 + 1
}
#####coverage intervals for LMM
if(
findInterval(beta0,fixef(modelLMM)[1] + c(-1,1)*lenLMM[1]) == 1
)
{
count0LMM = count0LMM + 1
}
if(
findInterval(beta1,fixef(modelLMM)[2] + c(-1,1)*lenLMM[2]) == 1
)
{
count1LMM = count1LMM + 1
}
if(
findInterval(beta2,fixef(modelLMM)[3] + c(-1,1)*lenLMM[3]) == 1
)
{
count2LMM = count2LMM + 1
}
}
summary(model3)
set.seed(572)
sb = 1
sy = 0.5
beta0 = 1
beta1 = -1
beta2 = 0.5
n = 10^3
repSize = 10^3
betas = matrix(0,nrow=repSize,ncol=3)
betasLMM = matrix(0,nrow=repSize, ncol=3)
count0 = 0
count1 = 0
count2 = 0
count0LMM = 0
count1LMM = 0
count2LMM = 0
for(k in 1:repSize)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < -1)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
model3 = geem(Y~t+X,id=id,data=missing,corstr="exchangeable")
#model2 = gee(Y~t+X, id=id, data=missing, na.action=na.omit, corstr="exchangeable")
#model3 = geem(Y~t+X,id=id,data=missing,corstr="independence")
modelLMM <- lmer(Y~t+X+(1|id), data=missing)
betas[k,] = model3$beta
betasLMM[k,] = fixef(modelLMM)
len = 1.96*summary(model3)$se.robust
lenLMM = 1.96*summary(modelLMM)$coefficients[,2]
if(
findInterval(beta0,model3$beta[1] + c(-1,1)*len[1]) == 1
)
{
count0 = count0 + 1
}
if(
findInterval(beta1,model3$beta[2] + c(-1,1)*len[2]) == 1
)
{
count1 = count1 + 1
}
if(
findInterval(beta2,model3$beta[3] + c(-1,1)*len[3]) == 1
)
{
count2 = count2 + 1
}
#####coverage intervals for LMM
if(
findInterval(beta0,fixef(modelLMM)[1] + c(-1,1)*lenLMM[1]) == 1
)
{
count0LMM = count0LMM + 1
}
if(
findInterval(beta1,fixef(modelLMM)[2] + c(-1,1)*lenLMM[2]) == 1
)
{
count1LMM = count1LMM + 1
}
if(
findInterval(beta2,fixef(modelLMM)[3] + c(-1,1)*lenLMM[3]) == 1
)
{
count2LMM = count2LMM + 1
}
}
warnings()
hist(betas[,1],main=expression(paste("Histogram of ", hat(beta)[0], " (GEE)")),xlab=expression(hat(beta)[0]))
hist(betas[,2],main=expression(paste("Histogram of ", hat(beta)[1], " (GEE)")),xlab=expression(hat(beta)[1]))
hist(betas[,3],main=expression(paste("Histogram of ", hat(beta)[2], " (GEE)")),xlab=expression(hat(beta)[2]))
hist(betasLMM[,1],main=expression(paste("Histogram of ", hat(beta)[0], " (LMM)")),xlab=expression(hat(beta)[0]))
hist(betasLMM[,2],main=expression(paste("Histogram of ", hat(beta)[1], " (LMM)")),xlab=expression(hat(beta)[1]))
hist(betasLMM[,3],main=expression(paste("Histogram of ", hat(beta)[2], " (LMM)")),xlab=expression(hat(beta)[2]))
