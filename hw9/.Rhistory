if( findInterval(beta0,rbind(low,up)[,1]) == 1)
{
count0 = count0 + 1
}
if( findInterval(beta1,rbind(low,up)[,2]) == 1)
{
count1 = count1 + 1
}
if( findInterval(beta2,rbind(low,up)[,3]) == 1)
{
count2 = count2 + 1
}
}
NEWbetas
head(betas)
head(NEWbetas)
head(NEWbetas,100)
head(NEWbetas,200)
head(NEWbetas,300)
head(NEWbetas,400)
head(NEWbetas,1000)
head(NEWbetas,2000)
head(NEWbetas,1000)
newbetas[1:1000,]
NEWbetas[1:1000,]
mine = NEWbetas[1:1000,]
hist(mine[,1])
hist(mine[,1],main=expression(paste("Histogram of ", hat(beta)[0])),xlab=expression(hat(beta)[0]))
hist(mine[,2],main=expression(paste("Histogram of ", hat(beta)[1])),xlab=expression(hat(beta)[1]))
hist(mine[,3],main=expression(paste("Histogram of ", hat(beta)[2])),xlab=expression(hat(beta)[2]))
count0
count1
count2
n = 10^4
count0 = 0
count1 = 0
count2 = 0
NEWbetas = matrix(0,nrow=10^4,ncol=3)
for(m in 1:10^3)
{
b = rnorm(n,mean=0,sd=sb)
X = rbinom(n,1,0.5)
y = c()
for(i in 1:n)
{
mu = beta0 + b[i] + beta1*(1:3) + beta2*X[i]
y = append(y,rnorm(3, mean = mu, sd = sy))
}
dat = data.frame(Y = y,X = rep(X,each=3),t = rep(1:3,n),id = rep(1:n,each=3))
missing = dat
inds = 3*(0:(n-1))+1
temp = c()
for(i in inds)
{
for(j in 0:1)
{
if(dat$Y[i+j] < 0)
{
missing$Y[((i+j+1):(i+2))] <- NA
break
}
}
}
model = gee(Y~t+X,id=id,data=dat,corstr="independence")
model2 = gee(Y~t+X,id=id,data=missing,corstr="independence")
#focus on missing DF
time1 = subset(missing,t==1)
miss2 = is.na(missing$Y) & missing$t==2
miss3 = is.na(missing$Y) & missing$t==3
clusters = missing[miss2,4] #CLUSTERS MISSING A TIME 2 INDEX
firstImpY = subset(missing,t==2)$Y
a = subset(missing,id%in%clusters & t==1) #used for prediction
mod2 <- lm(firstImpY ~ Y*X, data=time1)
secondImpY = subset(missing,t==3)$Y
first2 = subset(missing, t!=3)
wide = reshape(first2,timevar="t", idvar=c("X","id"),direction="wide")
mod3 <- lm(secondImpY~Y.1*Y.2*X, data=wide)
param2 = rnorm(4,mean=summary(mod2)$coefficients[,1],sd=summary(mod2)$coefficients[,2])
mod2$coefficients = param2
param3 = rnorm(8,mean=summary(mod3)$coefficients[,1],sd=summary(mod3)$coefficients[,2])
mod3$coefficients = param3
sig2 = sqrt(summary(mod2)$sigma^2*rchisq(1,mod2$df.residual)/mod2$df.residual)
sig3 = sqrt(summary(mod3)$sigma^2*rchisq(1,mod3$df.residual)/mod3$df.residual)
do.one <- function(n)
{
miss.i <- missing
mu2 = predict(mod2,a[,-c(3,4)]);
miss.i[ miss2, "Y"] <- rnorm( sum( miss2), mu2, summary(mod2)$sigma )
clusters3 = miss.i[miss3,4]
b = subset(miss.i,id%in%clusters3 & t!=3)
blah = reshape(b,timevar="t", idvar=c("X", "id"),direction="wide")
blah = blah[-2]
mu3 = predict(mod3,blah);
miss.i[miss3, "Y"] <- rnorm(sum(miss3), mu3, summary(mod3)$sigma)
gee.i <- gee(Y~t+X, id=id,
data=miss.i, corstr="independence")
gee.i
}
my.mi <- replicate(20, do.one(), simplify=FALSE)
betas <- MIextract(my.mi, fun=coef)
vars <- MIextract(my.mi, fun=function(x){as.matrix(x$robust.variance)})
imputed = MIcombine(betas,vars)
low = summary(imputed)$`(lower`
up = summary(imputed)$`upper)`
NEWbetas[m,] = imputed$coefficients
if( findInterval(beta0,rbind(low,up)[,1]) == 1)
{
count0 = count0 + 1
}
if( findInterval(beta1,rbind(low,up)[,2]) == 1)
{
count1 = count1 + 1
}
if( findInterval(beta2,rbind(low,up)[,3]) == 1)
{
count2 = count2 + 1
}
}
count
count0
count1
count2
imputed
xtable(imputed)
library(xtable)
xtable(imputed)
summary(model)
sigma = 1
acvf <- function(h,phi,theta)
{
return(
(sigma^2)/(1-phi^2) * ((1+theta^2)*phi^(abs(h)) + theta*(phi^(abs(h-3))+phi^(abs(h+3))))
)
}
acvf(0,0.9,0.99)
h=0:20
sigma = 1
phi = 0.9
acvf <- function(h,theta)
{
return(
(sigma^2)/(1-phi^2) * ((1+theta^2)*phi^(abs(h)) + theta*(phi^(abs(h-3))+phi^(abs(h+3))))
)
}
plot(h,acvf(h,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0)/acvf(0,0))
plot(h,acvf(h,-0.25)/acvf(0,-0.25))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
acvf(h,0.99)/acvf(0,0.99)
plot(h,acvf(h,0)/acvf(0,0))
plot(h,acvf(h,-0.25)/acvf(0,-0.25))
acvf(h,-0.25)/acvf(0,-0.25)
plot(h,acvf(h,-0.5)/acvf(0,-0.5))
plot(h,acvf(h,-0.75)/acvf(0,-0.75))
plot(h,acvf(h,-0.99)/acvf(0,-0.99))
plot.ACF <- function(my.acf,main)
{
xs <- (-(length(my.acf)-1)):(length(my.acf)-1)
two.sided.acf <- c(rev(my.acf[-1]),my.acf)
plot(xs,two.sided.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(xs,two.sided.acf,col="red")
abline(h=0,lty="dashed")
}
plot.ACF(acvf(h,0.99)/acvf(0,0.99))
plot.ACF(acvf(h,0.99)/acvf(0,0.99),"blah")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),typ="h")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),typ="h")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),col="red")
plot(h,acvf(h,0)/acvf(0,0),typ="h")
abline(h=0,lty="dashed")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),col="red")
abline(h=0,lty="dashed")
plot.ACF <- function(my.acf,main)
{
plot(h,my.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(h,my.acf,col="red")
abline(h=0,lty="dashed")
}
h=0:20
plot.ACF <- function(my.acf,main)
{
plot(h,my.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(h,my.acf,col="red")
abline(h=0,lty="dashed")
}
plot.acf(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,-0.25)/acvf(0,-0.25),main="ACF for Theta = -0.25")
plot.ACF(acvf(h,-0.5)/acvf(0,-0.5),main="ACF for Theta = -0.5")
plot.ACF(acvf(h,-0.75)/acvf(0,-0.75),main="ACF for Theta = -0.75")
plot(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
plot.ACF(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,-0.25)/acvf(0,-0.25),main="ACF for Theta = -0.25")
plot.ACF(acvf(h,-0.5)/acvf(0,-0.5),main="ACF for Theta = -0.5")
plot.ACF(acvf(h,-0.75)/acvf(0,-0.75),main="ACF for Theta = -0.75")
plot.ACF(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
innovations.algorithm <- function(acvf,n.max=length(acvf)-1)
{
thetas <- vector(mode="list",length=n.max)
vs <- rep(acvf[1],n.max+1)
for(n in 1:n.max)
{
thetas[[n]] <- rep(0,n)
thetas[[n]][n] <- acvf[n+1]/vs[1]
if(n>1)
{
for(k in 1:(n-1))
{
js <- 0:(k-1)
thetas[[n]][n-k] <- (acvf[n-k+1] - sum(thetas[[k]][k-js]*thetas[[n]][n-js]*vs[js+1]))/vs[k+1]
}
}
js <- 0:(n-1)
vs[n+1] <- vs[n+1] - sum(thetas[[n]][n-js]^2*vs[js+1])
}
structure(list(vs=vs,thetas=thetas))
}
theta = 2/3
phi = 6/13
s1 = 9/13
s2 = 133/169
MA1.acvf = s1*c(1+theta^2,theta,0,0,0)
MA1.acvf
1+theta^2
s1
s1*(1+theta^2)
innovations.algorithm(MA1.acvf)
phi^(1:4)
AR1.acvf = (s2/(1-phi^2))*phi^(1:4)
AR1.acvf
resAR1 = innovations.algorithm(AR1.acvf)
resAR1
LD.recursions <- function(acvf, p=length(acvf)-1)
{
blpc <- vector(mode="list", length=p)
phis <- acvf[2]/acvf[1]
pev  <- rep(acvf[1],p+1)
blpc[[1]] <- phis
pacf <- rep(phis,p)
pev[2] <- pev[1]*(1-phis^2)
if(p > 1)
{
for(k in 2:p)
{
old.phis <- phis
phis <- rep(0,k)
## compute kth order pacf (reflection coefficient)
phis[k] <- (acvf[k+1] - sum(old.phis*acvf[k:2]))/pev[k]
phis[1:(k-1)] <- old.phis - phis[k]*rev(old.phis)
blpc[[k]] <- phis
pacf[k]  <- phis[k]
pev[k+1] <- pev[k]*(1-phis[k]^2)
}
}
structure(list(coeffs=phis,innov.var=pev[p+1],pev=pev,pacf=pacf,blpc=blpc))
}
LD.recursions <- function(acvf, p=length(acvf)-1)
{
blpc <- vector(mode="list", length=p)
phis <- acvf[2]/acvf[1]
pev  <- rep(acvf[1],p+1)
blpc[[1]] <- phis
pacf <- rep(phis,p)
pev[2] <- pev[1]*(1-phis^2)
if(p > 1)
{
for(k in 2:p)
{
old.phis <- phis
phis <- rep(0,k)
## compute kth order pacf (reflection coefficient)
phis[k] <- (acvf[k+1] - sum(old.phis*acvf[k:2]))/pev[k]
phis[1:(k-1)] <- old.phis - phis[k]*rev(old.phis)
blpc[[k]] <- phis
pacf[k]  <- phis[k]
pev[k+1] <- pev[k]*(1-phis[k]^2)
}
}
structure(list(coeffs=phis,innov.var=pev[p+1],pev=pev,pacf=pacf,blpc=blpc))
}
LD.recursions(MA1.acvf)
LD.recursions(AR1.acvf)
AR1.acvf
MA1.acvf
AR1.acvf = (s2/(1-phi^2))*phi^(0:4)
LD.recursions(AR1.acvf)
LD.recursions(MA1.acvf)
LD.recursions(MA1.acvf)
library(xtable)
?xtable
resMA1 = innovations.algorithm(MA1.acvf)
resMA1
LD.recursions(AR1.acvf)
resAR1 = innovations.algorithm(AR1.acvf)
resAR1
LD.recursions(AR1.acvf)
joint <- function(beta1, b)
{
if(b == 0 || b == -beta1)
{
ans = 0.5*dnorm(beta1)
}
else ans = 0
ans
}
Jacobian <- function(mu0, mu1)
{
return(
1/(mu0-mu0^2) * 1/(mu1-mu1^2)
)
}
mesh = 0.01
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(x),ncol=length(x))
for(i in 1:length(x))
{
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(x))
{
for(j in 1:length(x))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0,mu1)
}
}
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0,mu1)
}
}
sigmoid <- function(x)
{
return(1/(1+exp(-x)))
}
logit <- function(p)
{
return( log(p/(1-p))
)
}
mesh = 0.01
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0,mu1)
}
}
mu0
mu1
logit(mu0)
logit(mu1)
z
dim(z)
length(mu0)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0,mu1)
}
}
mesh = 0.01
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0[i],mu1[j])
}
}
z
contour(x,y,z)
contour(mu0,mu1,z)
mesh = 0.001
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0[i],mu1[j])
}
}
contour(mu0,mu1,z)
joint <- function(b,beta1)
{
if(b == 0 || b == -beta1)
{
ans = 0.5*dnorm(beta1)
}
else ans = 0
ans
}
mesh = 0.001
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0[i],mu1[j])
}
}
contour(mu0,mu1,z)
mesh = 0.001
mu0 <- mu1 <- seq(0+mesh,1-mesh,by=mesh)
z <- matrix(0,nrow=length(mu0),ncol=length(mu0))
w <- z
for(i in 1:length(mu0))
{
for(j in 1:length(mu0))
{
z[i,j] = joint(logit(mu0[i]),logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0[i],mu1[j])
w[i,j] = dnorm(logit(mu0[i]))*dnorm(logit(mu1[j])-logit(mu0[i]))*Jacobian(mu0[i],mu1[j])
}
}
contour(mu0,mu1,w)
dat2 <- read.table("pairsdata2.txt", header=T)
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw9")
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw9")
dat2 <- read.table("pairsdata2.txt", header=T)
head(dat2)
library(lme4)
m2 <- glmer(y~x+(1|id), data=dat2)
m2 <- glmer(y~x+(1|id), data=dat2, family=binomial)
m2
summary(m2)
dat1 <- read.table("pairsdata1.txt", header=T)
m1 <- glmer(y~x+(1|id), data=dat1, family=binomial)
m1
m2
head(dat1)
order(dat1,id)
order(dat1,dat1$id)
dat1[order(dat1$id),]
dat1[order(dat1$id,dat1$x),]
whataboutit <- dat1[order(dat1$id,dat1$x),]
howaboutit <- dat2[order(dat1$id,dat1$x),]
wwhataboutit
whataboutit
n01 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 0 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 1)
n01 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 0 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 1)
n10 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 1 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 0)
n00 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 0 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 0)
n11 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 1 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 1)
n01
n10
n11
n00
howaboutit <- dat2[order(dat2$id,dat2$x),]
dat1
m1
n01+n10+n00+n11
cbeta1 <- log(n01/n10)
cbeta1
n01 <- sum(howabouit$y[seq(1, nrow(howabouit), 2)] == 0 & howabouit$y[seq(2, nrow(howabouit), 2)] == 1)
howaboutit <- dat2[order(dat2$id,dat2$x),]
n01 <- sum(howabouit$y[seq(1, nrow(howabouit), 2)] == 0 & howabouit$y[seq(2, nrow(howabouit), 2)] == 1)
n01 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 0 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 1)
n10 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 1 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 0)
n00 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 0 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 0)
n11 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 1 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 1)
cbeta1 <- log(n01/n10) #1.306252
cbeta1
m2
n01
n10
n01
n11
n00
howaboutit <- dat2[order(dat2$id,dat2$x),]
howaboutit
n10+n01
n00
n11
m1
m2
n01
n10
n01/n10
n01 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 0 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 1)
n10 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 1 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 0)
n00 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 0 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 0)
n11 <- sum(whataboutit$y[seq(1, nrow(whataboutit), 2)] == 1 & whataboutit$y[seq(2, nrow(whataboutit), 2)] == 1)
n01
n10
n01 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 0 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 1)
n10 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 1 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 0)
n00 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 0 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 0)
n11 <- sum(howaboutit$y[seq(1, nrow(howaboutit), 2)] == 1 & howaboutit$y[seq(2, nrow(howaboutit), 2)] == 1)
n01
n10
m1
m2
