{
return(
(p[,1]/lambda[1] + p[,2]/lambda[2])/sum(1/lambda)
)
}
objFunction <- function(x)
{
return(
1/2*norm(A%*%x-b, type="F")^2 + beta*sum(abs(x))
)
}
subdiff <- function(x)
{
return(
t(A)%*%(A%*%x-b) + beta*sign(x)
)
}
#initialization
gamma = 0.5
eta = 0.5
lambda = c(1,1)
epsilon = c(0.5,0.5)
x = rnorm(n)
xupdate = x
y = x
t = 1
tupdate = t
vals = objFunction(x)
subdiffVals = norm(subdiff(x))
tol = 10^-8
i = 1
p1 = rnorm(m,0,1)
p2 = rnorm(n,0,1)
repeat
{
pupdate1 = prox1(lambda[1],A%*%y) #NEW
pupdate2 = prox2(lambda[2],y) #NEW
xupdate = chol2inv(t(A)%*%A/lambda[1] + diag(n)/lambda[2])%*%((1/lambda[1])*t(A)%*%pupdate1 + (1/lambda[2])*pupdate2)
tupdate = (1 + sqrt(1+4*t^2))/2 #NEW
y = xupdate + ((t-1)/tupdate)*(xupdate - x) #NEW
if(norm(matrix(xupdate - x), type="F")<tol)
{
break
}
#  update the lambdas
if(
norm(matrix(xupdate - x), type="F") < norm(matrix(A%*%x-p1), type="F") + epsilon[1]
)
{
epsilon[1] = eta*epsilon[1]
}
#lambda[1] = norm(matrix(A%*%xupdate - pupdate1),type="F") + epsilon[1]
if(
norm(matrix(A%*%xupdate-pupdate1), type="F") < min(1, 0.9*norm(matrix(A%*%x-p1), type="F"))
)
{
lambda[1] = gamma*lambda[1] + epsilon[1]
}
#condition for updating epsilon_2 and lambda_2
if(
norm(matrix(xupdate - x), type="F") < norm(matrix(x-p2), type="F") + epsilon[2]
)
{
epsilon[2] = eta*epsilon[2]
}
#lambda[2] = norm(matrix(xupdate - pupdate[2]),type="F") + epsilon[2]
if(
norm(matrix(xupdate-pupdate2), type="F") < min(1, 0.9*norm(matrix(x-p2), type="F"))
)
{
lambda[2] = gamma*lambda[2] + epsilon[2]
}
print(lambda[2])
print(epsilon[2])
p1 = pupdate1
p2 = pupdate2
x = xupdate
t = tupdate
vals = append(vals,objFunction(x))
subdiffVals = append(subdiffVals,norm(subdiff(x)))
i = i + 1
}
####
####
####
lambda
mtcars
qplot(mpg, data=mtcars)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(mpg, data=mtcars)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5),
main="Distribution of Gas Milage", xlab="Miles Per Gallon",
ylab="Density")
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"),
method="lm", formula=y~x, color=cyl,
main="Regression of MPG on Weight",
xlab="Weight", ylab="Miles per Gallon")
runif(c(1,9))
?runif
runif(min=1,max=9)
runif(1,min=1,max=9)
?glm
medv
dat <- boston
dat <- Boston
library(MASS)
dat <- Boston
Boston
names(BOston)
names(Boston)
?Boston
set.seed(500)
apply(data,2,function(x) sum(is.na(x)))
data <- Boston
set.seed(500)
apply(data,2,function(x) sum(is.na(x)))
set.seed(500)
apply(data,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train <- data[index,]
test <- data[-index,]
train
dim(train)
dim(test)
dim(Boston)
lm.fit <- glm(medv~., data=train)
lm.fit
?glm
summary(lm.fit)
lm.fit2 <- lm(medv~., data=train)
summary(lm.fit2)
4.823^2
?predict
predict(test, lm.fit)
predict(lm.fit, test)
pr.lm <- predict(lm.fit, test)
summary(pr.lm)
mse.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
mse.lm
library(tree)
install.packages("tree")
library(tree)
install.packages("ISLR")
library(ISLR)
attach(Carseats)
Sales
?ifelse
Sales<=8
Carseats
names(Carseats)
Carseats=data.frame(Carseats,High)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
names(Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
?tree
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
text(tree.carseats,pretty=1)
plot(tree.carseats)
text(tree.carseats,pretty=1)
text(tree.carseats,pretty=0)
plot(tree.carseats)
text(tree.carseats,pretty=0)
?text
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
nrow(Carseats)
sample(1:400,200)
?cv.tree
library(tree)
library(ISLR)
detach(Carseats)
attach(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
names(Carseats)
dim(Carseats)
Carseats <- Carseats[,1:12]
names(Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
tree.carseats #br
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
tree.pred
?table
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass) #rather than deviance
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$size,cv.carseats$dev,type="b") #DEVIANCE MEANS MISCLASS ERROR NOW
plot(cv.carseats$k,cv.carseats$dev,type="b")
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b") #DEVIANCE MEANS MISCLASS ERROR NOW
plot(cv.carseats$k,cv.carseats$dev,type="b")
prune.carseats=prune.misclass(tree.carseats,best=9)
?prune.misclass
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
prune.carseats=prune.misclass(tree.carseats,best=15)
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
High.test
tree.pred
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston=tree(medv~.,Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size,cv.boston$dev,type='b')
prune.boston=prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty=0)
?cv.tree
set.seed(1)
Z = rnorm(13,0,sigma)
sigma = 1
a = 1
b = -2
c = pi/4
##2(a)
#grab first 10 of Z and grab the latter 10 of Z
set.seed(1)
Z = rnorm(13,0,sigma)
X1 = a + b*Z[4:13] + c*Z[1:10]
#next realization
Z = rnorm(13,0,sigma)
X2 = a + b*Z[4:13] + c*Z[1:10]
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2a")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2a")
Z = rnorm(2,0,sigma)
X1 = cbind(cos(c*1:10),sin(c*1:10)) %*% Z
Z = rnorm(2,0,sigma)
X2 = cbind(cos(c*1:10),sin(c*1:10)) %*% Z
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2b")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2b")
#grab first 10 and last 10
Z = rnorm(11,0,sigma)
X1 = Z[2:11]*cos(c*1:10) + Z[1:10]*sin(c*1:10)
Z = rnorm(11,0,sigma)
X2 = Z[2:11]*cos(c*1:10) + Z[1:10]*sin(c*1:10)
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2c")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2c")
Z = rnorm(1,0,sigma)
X1 = rep(a+b*Z,10)
Z = rnorm(1,0,sigma)
X2 = rep(a+b*Z,10)
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2d")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2d")
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2d")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2d")
Z = rnorm(1,0,sigma)
X1 = Z*sin(c*1:10)
Z = rnorm(1,0,sigma)
X2 = Z*sin(c*1:10)
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2e")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2e")
#grab first 10 and last 10
Z = rnorm(11,0,sigma)
X1 = Z[2:11]*Z[1:10]
Z = rnorm(11,0,sigma)
X2 = Z[2:11]*Z[1:10]
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2f")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2f")
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2f")
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2f")
p4 <- read.table("evggfpd30.csv", header=TRUE, sep=",")
library(ggplot2)
library(sandwich)
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw1")
temp = as.matrix(p4)
p4 <- read.table("evggfpd30.csv", header=TRUE, sep=",")
library(ggplot2)
m <- dim(p4)[1] #this many people
n <- dim(p4)[2]
countsPerYear <- apply(p4,2,table) #compute counts of levels per year
p4 <- read.table("evggfpd30.csv", header=TRUE, sep=",")
library(ggplot2)
m <- dim(p4)[1] #this many people
n <- dim(p4)[2]
countsPerYear <- apply(p4,2,table) #compute counts of levels per year
zeros = as.matrix(p4) == matrix(0,nrow=m,ncol=n)
ones = as.matrix(p4) == matrix(1,nrow=m,ncol=n)
twos = as.matrix(p4) == matrix(2,nrow=m,ncol=n)
threes = as.matrix(p4) == matrix(3,nrow=m,ncol=n)
fours = as.matrix(p4) == matrix(4,nrow=m,ncol=n)
fives = as.matrix(p4) == matrix(5,nrow=m,ncol=n)
dead = cbind(unname(apply(zeros,2,sum)),rep(0,32))
poor = cbind(unname(apply(ones,2,sum)),rep(1,32))
fair = cbind(unname(apply(twos,2,sum)),rep(2,32))
good = cbind(unname(apply(threes,2,sum)),rep(3,32))
vgood = cbind(unname(apply(fours,2,sum)),rep(4,32))
eggs = cbind(unname(apply(fives,2,sum)),rep(5,32))
p4p2 <- data.frame(cbind(rep(1:32,6),rbind(dead, poor, fair, good, vgood, eggs)), row.names=NULL)
plot <- ggplot(p4p2, aes(X1, X2, color=factor(X3))) + geom_point() + geom_line() + xlab("Time (years)") + ylab("Absolute Count")
plot <- plot + ggtitle("Absolute Number of People in Different Health States Over Time")
plot
temp = as.matrix(p4)
vec = c()
vec2 = c()
for(i in 1:m)
{
vec = append(vec,temp[i,])
vec2 = append(vec2, rep(i,32))
}
vec0 = rep(1:32,m)
df <- data.frame(cbind(vec0,vec,vec2), row.names=NULL)
ggplot(df[1:3200,], aes(vec0,vec)) + geom_point() + geom_line() + facet_wrap(~vec2)
ggplot(df[3201:6400,], aes(vec0,vec)) + geom_point() + geom_line() + facet_wrap(~vec2)
m
prop = rep(0,n-1)
for(i in 1:n-1)
{
log = sum((p4[,i]!=p4[,i+1]))
}
p4[,1]
p4[,1] == p4[,2]
sum(p4[,1] == p4[,2])
prop = rep(0,n-1)
for(i in 1:n-1)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
p4[,1]
p4[,1+1]
prop = rep(0,n-1)
for(i in 1:n-1)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop[1]
m
sum(p4[,1]==p4[,2])
sum(p4[,2]==p4[,3])
sum(p4[,31]==p4[,32])
prop = rep(0,n-1)
for(i in 1:n-1)
{
m - sum(p4[,i]==p4[,i+1])
}
prop = rep(0,n-1)
for(i in 1:n-1)
{
sum(p4[,i]==p4[,i+1])
}
n
sum(p4[,1]==p4[,1+1])
for(i in 1:2)
{
sum(p4[,i]==p4[,i+1])
}
prop = rep(0,n-1)
for(i in 1:2)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop = rep(0,n-1)
for(i in 1:10)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop = rep(0,n-1)
for(i in 1:20)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop = rep(0,n-1)
for(i in 1:30)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop = rep(0,n-1)
for(i in 1:31)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
prop = prop / m
prop
qplot(prop)
qplot(1:31, prop)
prop
dftemp = data.frame(cbind(1:31,prop))
dftemp
ggplot(dftemp, aes(V1, prop)) + geom_density()
prop = prop / m
dftemp = data.frame(cbind(1:31,prop))
ggplot(dftemp, aes(V1, prop)) + geom_density()
dftemp
ggplot(dftemp, aes(y=prop)) + geom_density()
ggplot(dftemp, aes(x=V1, y=prop)) + geom_density()
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point()
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_line()
prop
prop * m
prop = rep(0,n-1)
for(i in 1:31)
{
prop[i] = m - sum(p4[,i]==p4[,i+1])
}
prop
dim(p4)
m
prop = prop / m
pro
prop
dftemp$prop
dftemp = data.frame(cbind(1:31,prop))
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_line()
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_line() + ylim(c(0,1))
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_density() + ylim(c(0,1))
ggplot(dftemp, aes(y=prop)) + geom_density(kernel="Gaussian")
ggplot(dftemp, aes(y=prop)) + geom_point() + geom_density() + ylim(c(0,1))
dftemp = data.frame(cbind(1:31,prop))
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_density() + ylim(c(0,1))
ggplot(dftemp, aes(x=V1, y=prop)) + geom_point() + geom_line() + ylim(c(0,1))
plotp1 + geom_point() + geom_line() + ylim(c(0,1)) + xlab("Time") + ylab("Proportion") + ggtitle("Proportion of People Moving Between Pairs of Health States")
plotp1 <- ggplot(dftemp, aes(x=V1, y=prop))
plotp1 + geom_point() + geom_line() + ylim(c(0,1)) + xlab("Time") + ylab("Proportion") + ggtitle("Proportion of People Moving Between Pairs of Health States")
?sample
sample(seq(1,m), 100, replace=TRUE)
set.seed(1)
people <- sample(seq(1,m), 100, replace=TRUE)
temp = as.matrix(p4[people,])
vec = c()
vec2 = c()
for(i in 1:m)
{
vec = append(vec,temp[i,])
vec2 = append(vec2, rep(i,32))
temp
set.seed(1)
people <- sample(seq(1,m), 100, replace=TRUE)
temp = as.matrix(p4[people,])
vec = c()
vec2 = c()
for(i in 1:100)
{
vec = append(vec,temp[i,])
vec2 = append(vec2, rep(i,32))
}
vec0 = rep(1:32,100)
df <- data.frame(cbind(vec0,vec,vec2), row.names=NULL)
ggplot(df, aes(vec0,vec)) + geom_point() + geom_line() + facet_wrap(~vec2)
m
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw1")
dat1 <- read.table("rats.csv", header=TRUE, sep=',')
attach(dat1)
m1 <- glm(y~x, family=Gamma(link="log")) #we have a log link log(1/lambda_i) = beta_0 + beta_1x_i
sand <- vcovHC(m1,type="HC0")
beta <- m1$coefficients
m1
summary(m1)
confint.default((m1))
?rnorm
set.seed(1)
Z = rnorm(13,0,sigma)
Z
X1 = a + b*Z[4:13] + c*Z[1:10]
#next realization
Z = rnorm(13,0,sigma)
X2 = a + b*Z[4:13] + c*Z[1:10]
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2a")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2a")
##2(b)
Z = rnorm(2,0,sigma)
Z
X1 = cbind(cos(c*1:10),sin(c*1:10)) %*% Z
Z = rnorm(2,0,sigma)
X2 = cbind(cos(c*1:10),sin(c*1:10)) %*% Z
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2b")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2b")
##2(c)
#grab first 10 and last 10
Z = rnorm(11,0,sigma)
X1 = Z[2:11]*cos(c*1:10) + Z[1:10]*sin(c*1:10)
Z = rnorm(11,0,sigma)
X2 = Z[2:11]*cos(c*1:10) + Z[1:10]*sin(c*1:10)
plot(1:10, X1, col="blue", xlab="t", typ="b", ylab="X", main="First Realization of 2c")
plot(1:10, X2, col="blue", xlab="t", typ="b", ylab="X", main="Second Realization of 2c")
