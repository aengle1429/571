b = subset(miss.i,id%in%clusters3 & t!=3)
blah = reshape(b,timevar="t", idvar=c("X", "id"),direction="wide")
blah = blah[-2]
mu3 = predict(mod3,blah);
miss.i[miss3, "Y"] <- rnorm(sum(miss3), mu3, summary(mod3)$sigma)
gee.i <- gee(Y~t+X, id=id,
data=miss.i, corstr="independence")
gee.i
}
my.mi <- replicate(20, do.one(), simplify=FALSE)
betas <- MIextract(my.mi, fun=coef)
vars <- MIextract(my.mi, fun=function(x){as.matrix(x$robust.variance)})
imputed = MIcombine(betas,vars)
low = summary(imputed)$`(lower`
up = summary(imputed)$`upper)`
NEWbetas[m,] = imputed$coefficients
if( findInterval(beta0,rbind(low,up)[,1]) == 1)
{
count0 = count0 + 1
}
if( findInterval(beta1,rbind(low,up)[,2]) == 1)
{
count1 = count1 + 1
}
if( findInterval(beta2,rbind(low,up)[,3]) == 1)
{
count2 = count2 + 1
}
}
count
count0
count1
count2
imputed
xtable(imputed)
library(xtable)
xtable(imputed)
summary(model)
sigma = 1
acvf <- function(h,phi,theta)
{
return(
(sigma^2)/(1-phi^2) * ((1+theta^2)*phi^(abs(h)) + theta*(phi^(abs(h-3))+phi^(abs(h+3))))
)
}
acvf(0,0.9,0.99)
h=0:20
sigma = 1
phi = 0.9
acvf <- function(h,theta)
{
return(
(sigma^2)/(1-phi^2) * ((1+theta^2)*phi^(abs(h)) + theta*(phi^(abs(h-3))+phi^(abs(h+3))))
)
}
plot(h,acvf(h,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0)/acvf(0,0))
plot(h,acvf(h,-0.25)/acvf(0,-0.25))
plot(h,acvf(h,0.99)/acvf(0,0.99))
plot(h,acvf(h,0.99)/acvf(0,0.99))
acvf(h,0.99)/acvf(0,0.99)
plot(h,acvf(h,0)/acvf(0,0))
plot(h,acvf(h,-0.25)/acvf(0,-0.25))
acvf(h,-0.25)/acvf(0,-0.25)
plot(h,acvf(h,-0.5)/acvf(0,-0.5))
plot(h,acvf(h,-0.75)/acvf(0,-0.75))
plot(h,acvf(h,-0.99)/acvf(0,-0.99))
plot.ACF <- function(my.acf,main)
{
xs <- (-(length(my.acf)-1)):(length(my.acf)-1)
two.sided.acf <- c(rev(my.acf[-1]),my.acf)
plot(xs,two.sided.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(xs,two.sided.acf,col="red")
abline(h=0,lty="dashed")
}
plot.ACF(acvf(h,0.99)/acvf(0,0.99))
plot.ACF(acvf(h,0.99)/acvf(0,0.99),"blah")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),typ="h")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),typ="h")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),col="red")
plot(h,acvf(h,0)/acvf(0,0),typ="h")
abline(h=0,lty="dashed")
plot(h,acvf(h,0.99)/acvf(0,0.99),typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",cex=0)
points(h,acvf(h,0.99)/acvf(0,0.99),col="red")
abline(h=0,lty="dashed")
plot.ACF <- function(my.acf,main)
{
plot(h,my.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(h,my.acf,col="red")
abline(h=0,lty="dashed")
}
h=0:20
plot.ACF <- function(my.acf,main)
{
plot(h,my.acf,typ="h",xlab="h  (lag)",ylab="ACF",ylim=c(-1,1),col="blue",main=main,cex=0.5)
points(h,my.acf,col="red")
abline(h=0,lty="dashed")
}
plot.acf(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,-0.25)/acvf(0,-0.25),main="ACF for Theta = -0.25")
plot.ACF(acvf(h,-0.5)/acvf(0,-0.5),main="ACF for Theta = -0.5")
plot.ACF(acvf(h,-0.75)/acvf(0,-0.75),main="ACF for Theta = -0.75")
plot(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
plot.ACF(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
plot.ACF(acvf(h,0.99)/acvf(0,0.99),main="ACF for Theta = 0.99")
plot.ACF(acvf(h,0)/acvf(0,0),main="ACF for Theta = 0")
plot.ACF(acvf(h,-0.25)/acvf(0,-0.25),main="ACF for Theta = -0.25")
plot.ACF(acvf(h,-0.5)/acvf(0,-0.5),main="ACF for Theta = -0.5")
plot.ACF(acvf(h,-0.75)/acvf(0,-0.75),main="ACF for Theta = -0.75")
plot.ACF(acvf(h,-0.99)/acvf(0,-0.99),main="ACF for Theta = -0.99")
innovations.algorithm <- function(acvf,n.max=length(acvf)-1)
{
thetas <- vector(mode="list",length=n.max)
vs <- rep(acvf[1],n.max+1)
for(n in 1:n.max)
{
thetas[[n]] <- rep(0,n)
thetas[[n]][n] <- acvf[n+1]/vs[1]
if(n>1)
{
for(k in 1:(n-1))
{
js <- 0:(k-1)
thetas[[n]][n-k] <- (acvf[n-k+1] - sum(thetas[[k]][k-js]*thetas[[n]][n-js]*vs[js+1]))/vs[k+1]
}
}
js <- 0:(n-1)
vs[n+1] <- vs[n+1] - sum(thetas[[n]][n-js]^2*vs[js+1])
}
structure(list(vs=vs,thetas=thetas))
}
theta = 2/3
phi = 6/13
s1 = 9/13
s2 = 133/169
MA1.acvf = s1*c(1+theta^2,theta,0,0,0)
MA1.acvf
1+theta^2
s1
s1*(1+theta^2)
innovations.algorithm(MA1.acvf)
phi^(1:4)
AR1.acvf = (s2/(1-phi^2))*phi^(1:4)
AR1.acvf
resAR1 = innovations.algorithm(AR1.acvf)
resAR1
LD.recursions <- function(acvf, p=length(acvf)-1)
{
blpc <- vector(mode="list", length=p)
phis <- acvf[2]/acvf[1]
pev  <- rep(acvf[1],p+1)
blpc[[1]] <- phis
pacf <- rep(phis,p)
pev[2] <- pev[1]*(1-phis^2)
if(p > 1)
{
for(k in 2:p)
{
old.phis <- phis
phis <- rep(0,k)
## compute kth order pacf (reflection coefficient)
phis[k] <- (acvf[k+1] - sum(old.phis*acvf[k:2]))/pev[k]
phis[1:(k-1)] <- old.phis - phis[k]*rev(old.phis)
blpc[[k]] <- phis
pacf[k]  <- phis[k]
pev[k+1] <- pev[k]*(1-phis[k]^2)
}
}
structure(list(coeffs=phis,innov.var=pev[p+1],pev=pev,pacf=pacf,blpc=blpc))
}
LD.recursions <- function(acvf, p=length(acvf)-1)
{
blpc <- vector(mode="list", length=p)
phis <- acvf[2]/acvf[1]
pev  <- rep(acvf[1],p+1)
blpc[[1]] <- phis
pacf <- rep(phis,p)
pev[2] <- pev[1]*(1-phis^2)
if(p > 1)
{
for(k in 2:p)
{
old.phis <- phis
phis <- rep(0,k)
## compute kth order pacf (reflection coefficient)
phis[k] <- (acvf[k+1] - sum(old.phis*acvf[k:2]))/pev[k]
phis[1:(k-1)] <- old.phis - phis[k]*rev(old.phis)
blpc[[k]] <- phis
pacf[k]  <- phis[k]
pev[k+1] <- pev[k]*(1-phis[k]^2)
}
}
structure(list(coeffs=phis,innov.var=pev[p+1],pev=pev,pacf=pacf,blpc=blpc))
}
LD.recursions(MA1.acvf)
LD.recursions(AR1.acvf)
AR1.acvf
MA1.acvf
AR1.acvf = (s2/(1-phi^2))*phi^(0:4)
LD.recursions(AR1.acvf)
LD.recursions(MA1.acvf)
LD.recursions(MA1.acvf)
library(xtable)
?xtable
resMA1 = innovations.algorithm(MA1.acvf)
resMA1
LD.recursions(AR1.acvf)
resAR1 = innovations.algorithm(AR1.acvf)
resAR1
LD.recursions(AR1.acvf)
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
library(geeM)
library(arm)
library(ggplot2)
library("lme4") # contains the (balanced) sleepstudy data
sleepstudy$DaysC <- with(sleepstudy, Days - mean(Days)) # centering
library("nlme")
lm0c <- lm( Reaction ~ DaysC, sleepstudy) # ignore clustering
lme1 <- lme(Reaction ~ DaysC, random=~1|Subject, data=sleepstudy)
lme2a <- lme(Reaction ~ DaysC, random=reStruct(~DaysC|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G
lme2b <- lme(Reaction ~ DaysC, random=~DaysC|Subject,
data=sleepstudy) # unrestricted G
yMarg <- fitted(lme2a, level=0)[1:10] #marginal means, just need to grab the first 10
#need Sigma_i = ziGzi^T + phi R_i now...
VarCorr(lme2a)
z = model.matrix(lme2a,data=sleepstudy)[1:10,] #need these rows for the z_i
G = diag(
VarCorr(lme2a)[1:2,1]
)
#correlation DEFAULTS to null, so no correlation, so R_i = I
Sig = z%*%G%*%t(z) + diag(VarCorr(lme2a)[3,1],nrow=10,ncol=10)
ses = sqrt(diag(Sig))
upper = yMarg + 1.96*ses
lower = yMarg - 1.96*ses
yMarg
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
for(i in 1:10)
{
segments(x0=i,y0=lower,x1=i,y0=upper)
}
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
for(i in 1:10)
{
segments(x0=i,y0=lower[i],x1=i,y0=upper[i])
}
upper = yMarg + 1.96*ses
lower = yMarg - 1.96*ses
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
for(i in 1:10)
{
segments(x0=i,y0=lower[i],x1=i,y1=upper[i])
}
plot(yMargU, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Uncentered X")
lme2c <- lme(Reaction ~ Days, random=reStruct(~Days|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G
yMargU <- fitted(lme2c, level=0)[1:10] #marginal means, just need to grab the first 10
zU = model.matrix(lme2c,data=sleepstudy)[1:10,] #need these rows for the z_i
GU = diag(
VarCorr(lme2c)[1:2,1]
)
#correlation DEFAULTS to null, so no correlation, so R_i = I
SigU = zU%*%GU%*%t(zU) + diag(VarCorr(lme2c)[3,1],nrow=10,ncol=10)
sesU = sqrt(diag(SigU))
upperU = yMargU + 1.96*sesU
lowerU = yMargU - 1.96*sesU
plot(yMargU, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Uncentered X")
for(i in 1:10)
{
segments(x0=i,y0=lowerU[i],x1=i,y1=upperU[i])
}
plot(yMarg, ylim=c(100,500), main="Marignal Mean and 95% Confidence Intervals, Centered X")
for(i in 1:10)
{
segments(x0=i,y0=lower[i],x1=i,y1=upper[i])
}
plot(dat$age^2,residuals(m2,type="pearson"),ylab="PearsonResiduals",xlab="age", main="Pearson Residuals vs. Age^2")
plot(dat$age^2,residuals(m2,type="pearson"),ylab="PearsonResiduals",xlab="age", main="Pearson Residuals vs. Age^2")
n = 10^3
ni = 5
sigb = 1
sigy = 6
b = rnorm(1000,mean=0,sd=sigb)
do.one <- function(n)
{
y = c()
for(i in 1:n)
{
yi <- rnorm(ni, mean=b[i], sd = sigy)
y = append(y,yi)
}
mydat = data.frame(y=y,id=rep(1:n,each=ni))
m1 <- lmer(y ~ 1|id, data=mydat)
si = se.ranef(m1)$id #same for all, just grab first
bi = ranef(m1)$id
lower = bi - 1.96*si
upper = bi + 1.96*si
return(mean((lower < b) & (b < upper)))
}
P = replicate(10^4, do.one(10^3))
P
hist(P)
median(P)
mean(P)
10^4
setwd("~/Dropbox/UW2015-2016/Win2016/571/hw8")
dat <- read.table("xerop.csv", sep=",", header=T)
dat$cos <- cos(0.5*pi*(dat$time+1))
dat$sin <- sin(0.5*pi*(dat$time+1))
m1 <- geem(respinfect ~ sex + ht.for.age  + cos + sin + xerop + poly(age,degree=2,raw=T), family=binomial, corstr="ar1", data=dat, id=id)
summary(m1)
m1$coeff
m1$beta
m2
m2 <- glmer(respinfect ~ (1|id) + sex + ht.for.age  + cos + sin + xerop +  poly(age,degree=2,raw=T), family=binomial, data=dat, start=list(fixef = m1$beta))
m2
summary(m2)
dat
View(dat)
dat$time
unique(dat$time)
summary(lme2b)
unique(dat$time)
ranef(m2)
summary(m2)
names(summary(m2))
summary(m2)$coefficients
m3 <- glmer(respinfect ~ (1|id) + sex + ht.for.age  + cos + sin + xerop +  poly(age,degree=2,raw=T), family=binomial, data=dat, nAGQ=100)
summary(m3)
m3 <- glmer(respinfect ~ (1|id) + sex + ht.for.age  + cos + sin + xerop +  poly(age,degree=2,raw=T), family=binomial, data=dat, start=list(fixef = m1$beta), nAGQ=100)
m3
summary(m3)
intervals(m2)
0.54472-1.96*0.48133
0.54373/0.48133
fixef(m2)
xtable(fixef(m2))
library(memisc)
install.packages("memisc")
library(memisc)
getSummary.mer(m2)
mtable(m2)
?mtable
toLatex(mtable(m2))
install.packages("texreg")
library(texreg)
texreg(m2)
texreg(list(m1,m2))
m1
xtable(m1)
library(xtable)
xtable(m1)
m1
summary(m1)
m2
summary(m2)
extract(m1)
plot(m2)
plot(m3)
lines(lowess(fitted(m3),residuals(m3,type="pearson"),iter=0),col="red")
plot(m3)
plot(m2)
plot(m3)
lines(lowess(fitted(m3),residuals(m3,type="pearson"),iter=0),col="red")
summary(m1)
m3 <- glmer(respinfect ~ (1|id) + sex + ht.for.age  + cos + sin  +  poly(age,degree=2,raw=T), family=binomial, data=dat)
anova(m3,m2)
xtable(anova(m3,m2))
summary(m2)
summary(m1)
cor(dat$age, dat$time)
plot(dat$age, dat$time)
datAD
datAD <- scan("http://faculty.washington.edu/dbp/s519/Data/rs-deaths.txt") #p=1
mean(datAD)
datW <- scan("http://faculty.washington.edu/dbp/s519/Data/wind.txt") #p=1
datNPI <- scan("http://faculty.washington.edu/dbp/s519/Data/NPI.txt") #p=1
mean(datW)
mean(datNPI)
g(datAD)
g <- function(ts)
{
n = length(ts)
a = ts[1]^2 + ts[n]^2
b = sum(ts[-1]*ts[-n])
c = sum(ts[-c(1,n)]^2)
return(
polyroot(c(
-b*n,(a+c+c*n),(-2*b+b*n),(c-c*n)
))
)
}
g(datAD)
ar1.AD.mle = ar.mle(datAD, aic=FALSE, demean=TRUE, order.max=1)
ar1.AD.mle
?fft
clockDat<-scan("http://faculty.washington.edu/dbp/s519/Data/clock.txt")
clockDat<-scan("http://faculty.washington.edu/dbp/s519/Data/clock.txt")
clockDat
plot(clockDat)
plot(ac.ts,typ="l",xlab="t",ylab=expression(x[t]),col="blue",main="Atomic Clock Time Series")
ac.ts <-scan("http://faculty.washington.edu/dbp/s519/Data/clock.txt")
plot(ac.ts,typ="l",xlab="t",ylab=expression(x[t]),col="blue",main="Atomic Clock Time Series")
mean(ac.t)
mean(ac.ts)
ar.yw(ac.ts)
?ar.yw
plot.ACFestMA <- function(ts, y.lims=c(-1,1), xlab.ts="h  (lag)", ylab.ts="ACF", n.lags=40, lag.0=FALSE, q=0, main=NULL)
{
ts.acf <- acf(ts, lag.max=n.lags, plot=FALSE)
n.ts <- length(ts)
CI.hw <- 1.96/sqrt(n.ts)
k <- if(lag.0) 0 else 1
xs <- k:n.lags
ys <- ts.acf$acf[(k+1):(n.lags+1)]
plot(xs,ys,typ="h",xlab=xlab.ts,ylab=ylab.ts,ylim=y.lims,col="blue",main=main)
points(xs,ys,col="red",cex=0.5)
xs <- 1:(n.lags+10)
abline(h=0,lty="dashed")
lines(c(0.5,n.lags+0.5),rep(CI.hw,2),col="blue",lty="dashed")
lines(c(0.5,n.lags+0.5),rep(-CI.hw,2),col="blue",lty="dashed")
if(q > 0)
{
for(j in 0:(q-1))
{
CI.hw <- 1.96*(1+2*sum((ts.acf$acf[2:(2+j)])^2))/sqrt(n.ts)
lines(c(j+1.5,n.lags+0.5),rep(CI.hw,2),col="blue",lty="dashed")
lines(c(j+1.5,n.lags+0.5),rep(-CI.hw,2),col="blue",lty="dashed")
}
}
}
plot.ACFestMA(ac.ts,q=1,y.lims=c(-0.5,0.5),main="Sample ACF for Atomic Clock Series")
ac.pacf <- acf(ac.ts, lag.max=40, type="partial", plot=FALSE)
xs <- 1:40
ys <- ac.pacf$acf[1:40]
plot(xs,ys,typ="h",xlab="h  (lag)",ylab="PACF",ylim=c(-1,1),col="blue",main="Sample PACF for Atomic Clock Series")
points(xs,ys,col="red",cex=0.5)
n.ac <- length(ac.ts)
CI.hw <- 1.96/sqrt(n.ac)
abline(h=0,lty="dashed")
abline(h=c(-CI.hw,CI.hw),col="blue",lty="dashed")
?Arima
library(forecast)
library(model)
innovations.algorithm
install.packages("model")
install.packages("itsmr")
library(itsmr)
acvf(ac.ts)
acf(ac.ts)
?acf
test(ac.ts)
yw(ac.ts,1)
ar.yw(ac.ts,order.max=1)
plot.ACFestMA(ac.ts,q=1,y.lims=c(-0.5,0.5),main="Sample ACF for Atomic Clock Series")
ac.pacf <- acf(ac.ts, lag.max=40, type="partial", plot=FALSE)
ac.pacf <- acf(ac.ts, lag.max=40, type="partial", plot=FALSE)
xs <- 1:40
ys <- ac.pacf$acf[1:40]
plot(xs,ys,typ="h",xlab="h  (lag)",ylab="PACF",ylim=c(-1,1),col="blue",main="Sample PACF for Atomic Clock Series")
points(xs,ys,col="red",cex=0.5)
n.ac <- length(ac.ts)
CI.hw <- 1.96/sqrt(n.ac)
abline(h=0,lty="dashed")
abline(h=c(-CI.hw,CI.hw),col="blue",lty="dashed")
?fracdiff
datNPIdeMean = datNPI - mean(datNPI)
datNPI <- scan("http://faculty.washington.edu/dbp/s519/Data/NPI.txt") #p=1
datNPIdeMean = datNPI - mean(datNPI)
g(datNPIdeMean)
g <- function(ts)
{
n = length(ts)
a = ts[1]^2 + ts[n]^2
b = sum(ts[-1]*ts[-n])
c = sum(ts[-c(1,n)]^2)
return(
polyroot(c(
-b*n,(a+c+c*n),(-2*b+b*n),(c-c*n)
))
)
}
datNPIdeMean = datNPI - mean(datNPI)
g(datNPIdeMean)
ar1.NPI.mle = ar.mle(datNPI, aic=FALSE, demean=TRUE, order.max=1)
ar1.NPI.mle
datAD <- scan("http://faculty.washington.edu/dbp/s519/Data/rs-deaths.txt") #p=1
g(datAD)
ar1.AD.mle = ar.mle(datAD, aic=FALSE, demean=TRUE, order.max=1)
datW <- scan("http://faculty.washington.edu/dbp/s519/Data/wind.txt") #p=1
datWdeMean = datW - mean(datW)
g(datWdeMean)
ar1.W.mle = ar.mle(datW, aic=FALSE, demean=TRUE, order.max=1)
ar1.W.mle = ar.mle(datW, aic=FALSE, demean=TRUE, order.max=1)
ar1.W.mle
g(datWdeMean)
ar1.W.mle = ar.mle(datWdeMean, aic=FALSE, demean=FALSE, order.max=1)
ar1.W.mle
install.packages("nnet")
library(nnet)
?nnet
